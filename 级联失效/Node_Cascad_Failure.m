clear;clc
EE=[];  BB=[];  TT={};

%% COM
Node_load = [274	531	10717	435	261	52867	386	29920	3051	456	195	0	1263	996	576	546	0	273	298	699	18843	0	610	3708	610	3313	55517	24089	21477	190671	11624	181557	217494	6058	6907	4316	22162	30279	24720	219204	259231	651454	93679	166981	702	649	0	318	504	690	459	513	266782	380371	667	52414	20277	42690	1783395	8543	1335252	4685	440349	67482	709198	6699	865271	324358	372738	180	22563	4465	2920	2380	546083	2120	14396	32006	1274829	93780	9229	113807	208289	2060	1021046	223249	741750	30455	711895	2450	0	4310	12021	1116909	7884	100012	131	1180389	51199	0	6402452	580058	190568	63489	2750006	265491	6207	58005	874519	211799	5136	373466	632323	1030	4174	595	253445	2806537	954741	6434153	321530	34593	339619	651929	8851	2837	2251834	202309	59273	122607	227027	77555	12108	427533	60413	335003	315577	20397	4016	269128	863088	627251	580050	577453	1323589	172121	35816	3123497	663333	469929	129090	1651051	8484	0	0	9397	2921	1238214	2970	639081	11955	14083	3893	12485	2985	1986562	14057	2450	64954	256414	459431	9331	4530	413990	43748	135584	365624	223308	768885	383	979633	52974	153358	505879	34847	108046	138580	332165	30625	8688	79037	1394609	137998	46046	150480	26897	1747005	7688	2401794	351700	1334444	126293	436072	1475885	273376	491016	414685	194252	430399	1161923	71845	152305	880	105994	35756	8503
];
Node_Capacity = 2*Node_load;
A=xlsread('C:\Users\hp\Desktop\composite network.xlsx');
% 1-随机破坏
r=[157	14	28	29	30	34	66	93	97	106	113	133	154	172	189	196	211	213	183	180	179	86	72	65	68	184	98	115	46	62	137	23	138	73	140	74	10	57	130	178	69	58	129	216	87	61	177	91	215	170	173	123	15	83	90	100	103	120	85	41	26	126	53	88	143	150	165	32	71	116	12	52	152	104	195	149	107	208	191	55	205	31	63	186	190	212	148	45	84	168	95	105	119	146	125	89	44	158	193	136	153	185	151	166	201	20	176	59	181	182	92	187	121	76	139	67	64	16	94	60	17	96	24	112	144	25	132	79	75	174	11	175	163	80	36	117	99	155	127	39	128	118	33	202	156	109	198	27	50	209	38	81	192	194	108	147	78	135	203	200	162	161	37	199	204	134	19	35	7	8	47	171	169	70	22	56	9	49	122	40	160	51	188	131	214	197	145	114	21	43	142	164	82	111	124	167	159	207	210	54	6	18	42	102	48	110	206	2	141	4	1	77	5	3	13	101
];
% 2-节点度破坏
r=[13	101	3	5	77	1	2	4	6	18	42	48	54	102	110	141	206	9	21	22	40	43	49	51	56	70	82	111	114	122	124	131	142	145	159	160	164	167	169	171	188	197	207	210	214	7	8	11	16	17	19	24	25	27	33	35	36	37	38	39	47	50	59	60	64	67	75	76	78	79	80	81	92	94	96	99	108	109	112	117	118	121	127	128	132	134	135	139	144	147	155	156	161	162	163	174	175	181	182	187	192	194	198	199	200	202	203	204	209	10	12	15	20	23	26	31	32	41	44	45	46	52	53	55	57	58	61	62	63	65	68	69	71	72	73	74	83	84	85	86	87	88	89	90	91	95	98	100	103	104	105	107	115	116	119	120	123	125	126	129	130	136	137	138	140	143	146	148	149	150	151	152	153	158	165	166	168	170	173	176	177	178	179	180	183	184	185	186	190	191	193	195	201	205	208	212	215	216	14	28	29	30	34	66	93	97	106	113	133	154	172	189	196	211	213	157
];
% 3-点介数破坏
r=[59	181	182	54	183	180	13	92	187	179	86	72	121	76	77	139	67	6	171	169	70	64	65	68	16	184	18	94	98	60	17	42	115	96	24	112	102	22	46	101	56	62	137	9	144	23	25	138	48	73	140	132	79	74	10	57	110	130	178	69	58	75	174	49	11	129	216	87	61	175	177	91	215	170	173	163	122	206	40	123	15	80	160	5	36	51	83	2	188	117	99	131	90	100	103	155	214	120	127	197	39	141	128	85	41	4	145	114	21	43	3	118	33	26	126	142	202	156	53	88	109	143	164	150	198	82	165	27	32	71	116	50	12	111	52	209	124	167	152	159	207	104	195	38	1	210	81	149	107	208	191	55	205	192	194	108	147	78	135	31	63	186	190	212	148	203	45	84	168	95	200	162	105	119	161	37	146	125	199	204	89	134	19	44	158	193	136	153	35	185	151	166	201	7	8	47	20	176	14	28	29	30	34	66	93	97	106	113	133	154	172	189	196	211	213	157
];
% 4-负载破坏
r=[120	101	148	118	105	199	127	166	59	197	152	204	192	61	201	145	79	158	98	210	94	85	181	119	109	67	141	179	87	89	65	149	124	42	160	113	142	102	143	144	75	184	206	150	171	63	203	209	134	207	174	54	112	69	177	200	123	136	188	68	121	137	205	140	53	106	41	170	117	131	178	86	40	33	110	83	128	208	30	103	32	146	44	183	212	195	187	193	176	151	202	130	82	186	214	96	80	43	191	132	211	64	169	104	135	129	108	27	182	6	56	99	194	175	58	147	215	185	122	78	189	88	38	8	196	39	28	71	37	29	138	57	21	77	162	167	164	133	93	161	31	3	156	172	81	125	190	60	216	153	95	198	35	66	107	34	111	62	173	72	36	92	115	139	163	24	26	9	165	159	157	73	126	90	168	74	76	84	13	114	14	213	45	20	50	55	46	23	25	116	15	16	2	52	49	51	10	4	7	180	48	19	1	18	5	11	70	97	12	17	22	47	91	100	154	155
];
%% RT
Node_load = [52414	20277	42690	1783395	8543	1335252	4685	440349	67482	709198	6699	865271	324358	372738	180	22563	4465	2920	2380	546083	2120	14396	32006	1274829	93780	9229	113807	208289	2060	1021046	223249	741750	30455	711895	2450	0	4310	12021	1116909	7884	100012	131	1180389	51199	0	6402452	580058	190568	63489	2750006	265491	6207	58005	874519	211799	5136	373466	632323	1030	4174	595	253445	2806537	954741	6434153	321530	34593	339619	651929	8851	2837	2251834	202309	59273	122607	227027	77555	12108	427533	60413	335003	315577	20397	4016	269128	863088	627251	580050	577453	1323589	172121	35816	3123497	663333	469929	129090	1651051	8484	0	0	9397	2921	1238214	2970	639081	11955	14083	3893	12485	2985	1986562	14057	2450	64954	256414	459431	9331	4530	413990	43748	135584	365624	223308	768885	383	979633	52974	153358	505879	34847	108046	138580	332165	30625	8688	79037	1394609	137998	46046	150480	26897	1747005	7688	2401794	351700	1334444	126293	436072	1475885	273376	491016	414685	194252	430399	1161923	71845	152305	880	105994	35756	8503
];
Node_Capacity = 2*Node_load;
A=xlsread('C:\Users\hp\Desktop\R-T network.xlsx');
% 1-随机破坏
r=[5	24	89	67	18	9	102	120	141	64	11	55	2	132	113	76	88	96	151	69	66	19	31	61	131	13	79	106	51	78	17	125	22	121	38	104	93	90	25	100	26	57	71	45	34	54	83	75	101	99	103	109	144	42	123	58	126	8	128	145	12	6	77	136	36	114	154	21	111	50	16	53	129	81	116	97	153	127	46	137	143	117	115	122	40	150	94	59	159	4	35	27	138	74	139	1	30	156	43	124	68	37	52	62	118	87	149	72	20	15	135	39	29	60	3	130	108	155	63	32	133	82	41	146	98	157	95	7	65	142	56	152	107	44	119	91	84	160	92	86	85	148	47	134	33	10	158	110	161	48	112	140	80	23	49	70	14	28	105	147	73
];
% 2-节点度破坏
r=[22	1	15	46	55	56	59	67	69	86	87	90	104	105	112	133	4	5	9	12	26	27	39	44	47	53	57	62	63	66	72	76	84	89	109	116	119	120	127	142	143	154	159	2	3	6	8	10	13	14	16	17	18	19	20	21	23	24	25	28	29	30	31	32	33	34	35	36	37	40	41	43	45	48	49	50	52	54	60	61	64	65	68	70	71	73	74	75	77	79	80	81	82	83	85	88	91	92	93	94	95	96	97	98	100	101	103	106	107	108	110	113	114	115	118	121	122	123	124	125	126	128	129	130	131	132	135	136	137	138	139	140	144	145	147	148	149	150	151	152	153	155	157	160	161	7	11	38	42	51	58	78	99	111	117	134	141	146	156	158	102
];
% 3-点介数破坏
r=[4	22	15	66	5	12	9	39	10	13	18	84	19	17	14	6	89	21	82	160	83	27	60	36	85	32	20	161	57	25	37	114	31	124	127	133	115	125	43	28	128	116	118	129	126	35	132	143	44	48	45	30	1	142	41	33	140	136	67	40	46	68	86	97	103	2	106	87	93	3	108	105	110	101	154	98	109	104	153	72	88	91	55	59	150	26	73	155	63	56	62	94	147	90	77	29	151	75	130	74	152	65	95	144	34	137	122	138	120	24	119	123	112	71	81	100	149	47	16	61	79	96	113	148	49	54	69	53	8	23	80	92	107	131	135	139	145	157	50	52	76	70	64	159	121	7	11	38	42	51	58	78	99	111	117	134	141	146	156	158	102
];
% 4-负载攻击
r=[65	46	93	63	50	144	72	111	4	142	97	149	137	6	146	90	24	103	43	155	39	30	126	64	54	12	86	124	32	34	10	94	69	105	58	87	47	88	89	20	129	151	95	116	8	148	154	79	152	119	57	14	122	145	68	81	133	13	66	82	150	85	51	115	62	76	123	31	55	28	73	153	48	91	128	157	140	132	138	121	96	147	75	27	131	159	41	25	136	77	156	9	114	49	80	74	53	127	1	44	139	120	3	92	160	130	67	23	134	33	141	16	83	2	22	107	112	109	78	38	106	101	117	26	70	135	5	161	98	40	143	11	52	56	7	118	17	37	60	84	108	110	104	102	18	71	35	113	19	21	29	59	158	61	125	15	42	36	45	99	100
];
%% WT
Node_load = [274	531	10717	435	261	52867	386	29920	3051	456	195	0	1263	996	576	546	0	273	298	699	18843	0	610	3708	610	3313	55517	24089	21477	190671	11624	181557	217494	6058	6907	4316	22162	30279	24720	219204	259231	651454	93679	166981	702	649	0	318	504	690	459	513	266782	380371	667
];
Node_Capacity = 1.25*Node_load;
A=xlsread('C:\Users\hp\Desktop\W-T network.xlsx');
% 1-随机破坏
r=[12	14	15	16	23	28	29	30	34	44	45	46	47	50	52	55	19	20	21	22	25	49	51	24	31	26	32	53	11	10	17	36	35	40	37	41	39	7	8	33	27	48	13	18	43	42	38	1	2	3	4	5	54	6	9
];
% 2-节点度破坏
r=[1	2	3	4	5	54	6	9	7	8	33	27	48	13	18	43	42	38	19	20	21	22	25	49	51	24	31	26	32	53	11	10	17	36	35	40	37	41	39	12	14	15	16	23	28	29	30	34	44	45	46	47	50	52	55
];
% 3-点介数破坏
r=[38	39	37	41	35	40	42	36	17	43	18	6	9	54	13	10	48	11	27	33	26	32	53	24	31	1	2	3	4	5	7	8	19	20	21	22	25	49	51	12	14	15	16	23	28	29	30	34	44	45	46	47	50	52	55
];
% 4-负载攻击
r=[42	54	53	41	40	33	30	32	44	43	27	6	38	8	39	28	37	29	21	31	3	35	34	36	24	26	9	13	14	45	20	50	55	46	23	25	15	16	2	52	49	51	10	4	7	48	19	1	18	5	11	12	17	22	47
];
%% 主函数
for t =1:length(r);
N=length(A);                        % 总的节点数
node_index=[];                      % 节点编号，用来标记节点的位置
new_failure=[];                     % 新增的损坏点
fail_node_temp=[];                  % 临时存放坏的节点
fail_nodes=[];                      % 级联损坏的节点集合
isolated_node=[];                   % 孤立点集合
total_failure=[];                   % 总的损坏点，包括级联失效+孤立的点
good_isolated_nodes=[];             % 完好的孤立节点的集合
A_temp=A;                           % 将原始矩阵保存为临时邻接矩阵
A_change=A_temp;                    % 临时矩阵可变大小的矩阵
Node_load_temp=[];                  % 临时存放节点负载
i=0;                                % 迭代的步数
node_index=1:N;                     % 标记索引

new_failure=[r(t)];

total_failure=new_failure;
fail_nodes=new_failure;
Node_load_temp = Node_load;         % 暂存节点的负载

while ~isempty(new_failure) && length(total_failure)~=N   % 判断迭代停止的条件
    %% 第0步判断是不是有孤立节点
    if i==0
        [new_isolated, new_isolated_node_num ] = find_isolated(A_temp);
        for m=1:new_isolated_node_num
            A_temp(new_isolated(m),:)=0;
            A_temp(:,new_isolated(m))=0;              % 将A_temp矩阵中孤立节点的连边关系移除
            
            index=find(node_index==new_isolated(m));
            node_index(index)=[];       % 将节点索引里面的孤立节点移除
            A_change(index,:)=[];
            A_change(:,index)=[];       % 将A_change矩阵中孤立节点移除
        end
        isolated_node = [isolated_node, new_isolated];
        total_failure = [total_failure, isolated_node];
    end
    
    %% 第1步失效节点导致级联失效，寻找新一轮失效节点
    for m=1:length(new_failure)
        % 先找失效节点的邻居节点的编号
        neiber=find(A_temp(new_failure(m),:)==1);
        delta=[];
        % 计算额外增加的负载，这里可以有很多的公式类型
        delta(neiber) = deal(Node_load_temp(new_failure(m)) .* Node_load(neiber)/sum(Node_load(neiber)));
        Node_load_temp(neiber) = deal(Node_load_temp(neiber) + delta(neiber)); % 负载重分配
        
        k = new_failure(m);
        A_temp(k,:)=0;
        A_temp(:,k)=0;                     % 将A_temp矩阵中级联失效节点的连边关系移除
        
        index=find(node_index==k);
        node_index(index)=[];              % 将节点索引里面的级联失效节点移除
        A_change(index,:)=[];
        A_change(:,index)=[];              % 将A_change矩阵中级联失效节点移除
    end
    
    Node_load_temp(new_failure(:))=0;  %把失效的节点的负载清零
    
    fail_node_temp=[];                     % 本轮失效导致的下一步失效的节点集合存储变量
    for k=1:length(node_index)
        kk = node_index(k);
        if Node_load_temp(kk)>Node_Capacity(kk)
            fail_node_temp = [fail_node_temp, kk]; % 得到本轮引起的失效节点集合
        end
    end
    
%     fprintf('新引起失效为: ');
%     if isempty(fail_node_temp)
%         disp('空')
%     else
%         disp(fail_node_temp);
%     end
    new_failure = fail_node_temp;
    
    %% 第2步寻找依旧存活的孤立节点
    [isolated_node, ~ ] = find_isolated(A_change);
    new_isolated_node=node_index(isolated_node);
    
    for m=1:length(isolated_node)
        k=new_isolated_node(m);
        A_temp(k,:)=0;
        A_temp(:,k)=0;                          % 将A_temp矩阵中级联失效节点的连边关系移除
        
        index=find(node_index==k);              % 将节点索引里面的级联失效节点移除
        node_index(index)=[];
        A_change(index,:)=[];
        A_change(:,index)=[];                   % 将A_change矩阵中级联失效节点移除
                Node_load_temp(index)=0;                % 将完好的孤立点的负载清零
    end
    
    good_isolated_nodes=unique([good_isolated_nodes, new_isolated_node]); % 统计累计的完好孤立点
%     fprintf('新增完好的孤立节点: ');
%     if isempty(new_isolated_node)
%         disp('空')
%     else
%         disp(new_isolated_node)
%     end
    %% 第3步统计失效节点
    fail_nodes = [fail_nodes,new_failure];
    total_failure = unique([total_failure, new_isolated_node, new_failure]);
    i=i+1;
    %     figure
    %     plot(graph(A_change));
end
Node_load_temp(total_failure)=0;

%% 求网络效率和最大连通子图 并初始化矩阵
E=network_efficient(A_temp);   EE=[EE,E];
b=largestcomponent(A_temp); B=length(b); BB=[BB,B];
TT{t,1}=total_failure;
A=A_temp; Node_load=Node_load_temp;  
clearvars -except A Node_load Node_Capacity r EE BB TT
end

EE=EE'; BB=BB';